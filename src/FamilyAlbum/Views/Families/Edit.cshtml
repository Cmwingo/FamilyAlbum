@model FamilyAlbum.Models.Family

@using ExifLib
@using SkiaSharp
@using System.Drawing
@using ImageMagick

@{
    ViewData["Title"] = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@*@<script type="text/javascript">
    $(document).ready(function () {
        $('#family-image').submit(function (event) {
            event.preventDefault();
            var theForm = $(this).serialize();
            var theFamilyId = $('#family-id').attr('value');
            console.log(theFamilyId);
            console.log(theForm);
            $.ajax({
                url: '@Url.Action("Upload")',
                type: 'POST',
                dataType: 'json',
                data: { file: theForm, familyId: "stuff" },
                success: function (result) {
                    var resultMessage = result;
                    $('#file-path').html(resultMessage);
                }
            });
        });

        $("body").on("submit", "#family-image", function (event) {
            event.preventDefault();

            var fdata = new FormData();

            $('input[name="file"]').each(function(a, b) {
                var fileInput = $('input[name="file"]')[a];
                if (fileInput.files.length > 0) {
                    var file = fileInput.files[0];
                    fdata.append("file", file);
                }
            });

            var theFamilyId = @Model.FamilyId;
            console.log("familyId: " + theFamilyId);
            console.log(fdata);
            $.ajax({
                url: '/families/DoUpload',
                type: 'POST',
                dataType: 'json',
                processData: false,
                contentType: false,
                data: {file: fdata, familyId: theFamilyId},
                success: function (result) {
                    var resultMessage = result;
                    $('#file-path').html(resultMessage);
                }
            });

        });
    });
</script>*@

@*<script type="text/javascript">
    $(document).ready(function () {
        $.ajax({
            type: 'GET',
            dataType: 'html',
            url: '@Url.Action("Upload")',
            success: function (result) {
                $('#upload-view').html(result);
                $('form').append("<input type='hidden' id='familyId' name='familyId' value='" + @Model.FamilyId + "' >");
            }
        });
    });
</script>*@

<h2>Edit</h2>

<form asp-action="Edit">
    <div class="form-horizontal">
        <h4>Family</h4>
        <hr />
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <input type="hidden" asp-for="FamilyId" />
        <div class="form-group">
            <label asp-for="Name" class="col-md-2 control-label"></label>
            <div class="col-md-10">
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger" />
            </div>
        </div>
        <div class="form-group">
            <label asp-for="Motto" class="col-md-2 control-label"></label>
            <div class="col-md-10">
                <input asp-for="Motto" class="form-control" />
                <span asp-validation-for="Motto" class="text-danger" />
            </div>
        </div>
        @*<div class="form-group">
            @Html.LabelFor(model => model.PhotoURL, htmlAttributes: new { @class = "" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PhotoURL, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PhotoURL, "", new { @class = "text-danger" })
            </div>
        </div>*@


        <div class="form-group">
            @Html.LabelFor(model => model.PhotoURL, new { @class = "" })
            <input type="file" id="flPhoto" name="upload">
            <table>
                <tbody>
                    <tr>
                        <td>
                            Width: <label id="lblWidth">200px</label>
                            Height: <label id="lblHeight">200px</label>
                        </td>
                        <td>
                            <a href="#" id="hlcropImage" style="vertical-align:top;">Crop Image</a>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <div style="height:600px; width:600px; overflow:auto;">
                                <img id="imgEmpPhoto" src="@Model.PhotoURL" height="600" alt="Portrait">
                            </div>
                        </td>
                        <td>
                            <canvas id="canvas" height="5" width="5" style="vertical-align:top;"></canvas>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
        <p>
            <img id="imgCropped" src="#" style="display:none;">
        </p>
        <input type="hidden" name="portraitCropped" id="portraitCropped">
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
</form>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script src="~/js/jquery.Jcrop.js"></script>
    <link rel="stylesheet" href="http://jcrop-cdn.tapmodo.com/v2.0.0-RC1/css/Jcrop.css" type="text/css" />    
    <script src="~/js/load-image.all.min.js"></script>
    <script type="text/javascript">

        var imageCropWidth = 0;
        var imageCropHeight = 0;
        var cropPointX = 0;
        var cropPointY = 0;
        var jcropApi;
        var rotation = 0;
        var orientation = 1;

        $(document).ready(function () {
            //initCrop();
        });

        $("#hlcropImage").on("click", function (e) {

            /*
            The event.preventDefault() method stops the default action of
            an element from happening. For example: Prevent a submit button
            from submitting a form. Prevent a link from following the URL
            */
            e.preventDefault();
            cropImage();
        });

        function initCrop() {
            $('#imgEmpPhoto').Jcrop({
                onChange: setCoordsAndImgSize,
                aspectRatio: 0, // 1 means will be same for height and width
                onSelect: setCoordsAndImgSize,
                maxSize: [600, 600],
                rotate: rotation
            }, function () { jcropApi = this });
        }

        function showCoordinate() {
            $("#lblWidth").text(imageCropWidth + "px");
            $("#lblHeight").text(imageCropHeight + "px");
        }

        function setCoordsAndImgSize(e) {
            imageCropWidth = e.w;
            imageCropHeight = e.h;

            cropPointX = e.x;
            cropPointY = e.y;

            $("#lblWidth").text(imageCropWidth + "px");
            $("#lblHeight").text(imageCropHeight + "px");
        }

        function cropImage() {

            if (imageCropWidth == 0 && imageCropHeight == 0) {
                alert("Please select crop area.");
                return;
            }

            var img = $("#imgEmpPhoto").attr("src");

            /*Show cropped image*/
            showCroppedImage();
        }

        function showCroppedImage() {
            var x1 = cropPointX;
            var y1 = cropPointY;

            var width = imageCropWidth;
            var height = imageCropHeight;
            var canvas = $("#canvas")[0];
            var context = canvas.getContext('2d');
            var img = new Image();
            img.onload = function () {
                canvas.height = height;
                canvas.width = width;
                context.drawImage(img, x1, y1, width, height, 0, 0, width, height);
                $('#portraitCropped').val(canvas.toDataURL());
            };
            img.src = $('#imgEmpPhoto').attr("src");
        }

        function readFile(input) {
            if (input.files && input.files[0]) {
                var reader = new FileReader();
                var canvas = $("#canvas")[0];
                var context = canvas.getContext('2d');
                var orientation;

                /*Destroy jcrop initialization other wise it will hold it previous image in img tag*/
                if (jcropApi != null)
                {
                    jcropApi.destroy();
                }
                reader.onload = function (e) {
                    $('#imgEmpPhoto').attr('src', "");
                    var img = $('#imgEmpPhoto').attr('src', e.target.result);
                                        loadImage.parseMetaData(input.files[0], function (data) {
                        orientation = data.exif.get('Orientation');
                        console.log(orientation);
                        switch (orientation) {

                            case 2:
                                // horizontal flip
                                context.translate(canvas.width, 0);
                                context.scale(-1, 1);
                                break;
                            case 3:
                                // 180° rotate left
                                context.translate(canvas.width, canvas.height);
                                context.rotate(Math.PI);
                                break;
                            case 4:
                                // vertical flip
                                context.translate(0, canvas.height);
                                context.scale(1, -1);
                                break;
                            case 5:
                                // vertical flip + 90 rotate right
                                context.rotate(0.5 * Math.PI);
                                context.scale(1, -1);
                                break;
                            case 6:
                                // 90° rotate right
                                context.rotate(0.5 * Math.PI);
                                context.translate(0, -canvas.height);
                                break;
                            case 7:
                                // horizontal flip + 90 rotate right
                                context.rotate(0.5 * Math.PI);
                                context.translate(canvas.width, -canvas.height);
                                context.scale(-1, 1);
                                break;
                            case 8:
                                // 90° rotate left
                                context.rotate(-0.5 * Math.PI);
                                context.translate(-canvas.width, 0);
                                rotation = 270;
                                $('#imgEmpPhoto').attr('class', 'rotate-270');
                                break;
                        }
                    })

                    /*Current uploaded image size*/
                    var width = img[0].height;
                    var height = img[0].width;
                    $("#lblWidth").text(width + "px");
                    $("#lblHeight").text(height + "px");

                    //InitCrop must call here otherwise it will not work
                    initCrop();
                }
                reader.onloadend = function (e) {
                    loadImage.parseMetaData(input.files[0], function (data) {
                        orientation = data.exif.get('Orientation');
                        console.log(orientation);
                        debugger;
                        switch (orientation) {

                            case 2:
                                // horizontal flip
                                context.translate(canvas.width, 0);
                                context.scale(-1, 1);
                                break;
                            case 3:
                                // 180° rotate left
                                context.translate(canvas.width, canvas.height);
                                context.rotate(Math.PI);
                                break;
                            case 4:
                                // vertical flip
                                context.translate(0, canvas.height);
                                context.scale(1, -1);
                                break;
                            case 5:
                                // vertical flip + 90 rotate right
                                context.rotate(0.5 * Math.PI);
                                context.scale(1, -1);
                                break;
                            case 6:
                                // 90° rotate right
                                context.rotate(0.5 * Math.PI);
                                context.translate(0, -canvas.height);
                                break;
                            case 7:
                                // horizontal flip + 90 rotate right
                                context.rotate(0.5 * Math.PI);
                                context.translate(canvas.width, -canvas.height);
                                context.scale(-1, 1);
                                break;
                            case 8:
                                // 90° rotate left
                                //context.rotate(-0.5 * Math.PI);
                                //context.translate(-canvas.width, 0);
                                //$('#imgEmpPhoto').addClass('rotate-270');
                                debugger;
                                break;
                        }
                    })
                }
                reader.readAsDataURL(input.files[0]);
            }
        }

        $('#flPhoto').change(function () {
            readFile(this);
            //initCrop();
        });
</script>
}
